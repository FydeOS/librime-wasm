#!/bin/bash
set -e
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
cd $SCRIPT_DIR
source ../cached-downloader

build_dir="build"
mkdir -p $build_dir

function download_and_extract {
    local url=$1
    local filename=$2
    dl_file $1 $2

    # Unarchive the file to the build directory
    if [[ $filename == *.tar.gz ]]; then
        tar -xzf $DL_CACHE_DIR/$filename -C $build_dir
    elif [[ $filename == *.zip ]]; then
        unzip -oq $DL_CACHE_DIR/$filename -d $build_dir
    else
        echo "Unknown archive format for file $filename"
        exit 1
    fi

    echo "File $filename unarchived to $build_dir directory"
}

echo Fetching yaml-cpp
download_and_extract https://github.com/jbeder/yaml-cpp/archive/refs/tags/yaml-cpp-0.7.0.tar.gz yaml-cpp-0.7.0.tar.gz

echo Fetching marisa
download_and_extract https://github.com/s-yata/marisa-trie/archive/refs/tags/v0.2.6.tar.gz marisa-0.2.6.tar.gz

echo Fetching opencc
download_and_extract https://github.com/BYVoid/OpenCC/archive/refs/tags/ver.1.1.6.tar.gz opencc-1.1.6.tar.gz
echo Patching opencc source code
(cd $build_dir/OpenCC-ver.1.1.6 && patch -p1 < ../../opencc.patch)

echo Fetching boost
download_and_extract https://boostorg.jfrog.io/artifactory/main/release/1.77.0/source/boost_1_77_0.tar.gz boost-1.77.0.tar.gz
echo Patching boost source code
(cd $build_dir/boost_1_77_0 && patch -p1 < ../../boost.patch)

# echo Fetching rime source code
# git clone https://github.com/t123yh/librime.git

echo Fetcing glog source code
# master needed; 0.6.0 doesn't have emscripten support
download_and_extract https://github.com/google/glog/archive/refs/heads/master.zip glog-master.zip


echo Done.
